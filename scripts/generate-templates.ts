import { mkdirSync, readdirSync, readFileSync, statSync, writeFileSync } from "node:fs";
import { dirname, join, relative } from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

interface Templates {
  [path: string]: string;
}

function scanTemplates(dir: string, baseDir = dir): Templates {
  const result: Templates = {};

  function scan(currentDir: string) {
    const entries = readdirSync(currentDir);

    for (const entry of entries) {
      const fullPath = join(currentDir, entry);
      const stat = statSync(fullPath);

      if (stat.isDirectory()) {
        scan(fullPath);
      } else {
        const relativePath = relative(baseDir, fullPath);
        const content = readFileSync(fullPath, "utf-8");
        result[relativePath] = content;
      }
    }
  }

  scan(dir);
  return result;
}

// Generate templates data
const templatesDir = join(__dirname, "..", "templates");
const templates = scanTemplates(templatesDir);

// Generate TypeScript file
const tsContent = `// Auto-generated by scripts/generate-templates.ts
// Do not edit manually

export type TemplateKey = ${Object.keys(templates)
  .map((k) => `'${k}'`)
  .join(" | ")}

export const templates = ${JSON.stringify(templates, null, 2)} as const

export default templates
`;

// Ensure generated directory exists
const generatedDir = join(__dirname, "..", "src", "generated");
try {
  mkdirSync(generatedDir, { recursive: true });
} catch {
  // Directory might already exist
}

// Write generated file
const outputPath = join(generatedDir, "templates.ts");
writeFileSync(outputPath, tsContent, "utf-8");

console.log(`âœ… Generated templates.ts with ${Object.keys(templates).length} files`);
